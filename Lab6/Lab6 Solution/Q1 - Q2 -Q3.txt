1. What is a volume in Kubernetes, and how does it differ from a container's storage?

A volume in Kubernetes is a storage unit that is accessible to one or more containers in a Pod. Unlike the ephemeral storage of a container, which is destroyed when the container is terminated, a volume persists as long as the Pod is running. Volumes enable data to be shared between containers or provide persistent storage.
1. What is a volume in Kubernetes, and how does it differ from a container's storage?

A volume in Kubernetes is a storage unit that is accessible to one or more containers in a Pod. Unlike the ephemeral storage of a container, which is destroyed when the container is terminated, a volume persists as long as the Pod is running. Volumes enable data to be shared between containers or provide persistent storage.

2. What are the different types of volumes available in Kubernetes? Describe at least three types and their use cases.

    emptyDir: This volume is created when a Pod is assigned to a node and exists as long as the Pod is running. It is used for sharing temporary data between containers.
        Use case: Sharing logs or temporary files between containers in the same Pod.

    hostPath: This volume mounts a file or directory from the host node's filesystem into the Pod.
        Use case: Accessing or storing logs directly on the host or accessing configuration files from the node.

    PersistentVolume (PV): A storage resource in the cluster that can be dynamically provisioned or statically defined. It supports long-term storage.
        Use case: Storing application data that must persist beyond the lifecycle of a Pod.

3. How do PersistentVolumes (PVs) and PersistentVolumeClaims (PVCs) work together in Kubernetes?

    A PersistentVolume (PV) is a storage resource in the cluster with specific capacity and access modes.
    A PersistentVolumeClaim (PVC) is a request by a user for storage that matches specific criteria (size, access mode).
    The PVC binds to a suitable PV based on its specifications, allowing Pods to access storage without knowing the underlying storage details.